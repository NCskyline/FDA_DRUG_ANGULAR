'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="LGT_DRUG")>  _
Partial Public Class LGT_DRUGDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertMAS_ADMIN_BUTTON(instance As MAS_ADMIN_BUTTON)
    End Sub
  Partial Private Sub UpdateMAS_ADMIN_BUTTON(instance As MAS_ADMIN_BUTTON)
    End Sub
  Partial Private Sub DeleteMAS_ADMIN_BUTTON(instance As MAS_ADMIN_BUTTON)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("LGT_DRUGConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property MAS_ADMIN_BUTTONs() As System.Data.Linq.Table(Of MAS_ADMIN_BUTTON)
		Get
			Return Me.GetTable(Of MAS_ADMIN_BUTTON)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MAS_ADMIN_BUTTON")>  _
Partial Public Class MAS_ADMIN_BUTTON
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDA As Integer
	
	Private _BTN_NAME As String
	
	Private _BTN_URL As String
	
	Private _SEQ As System.Nullable(Of Integer)
	
	Private _BTN_GROUP As System.Nullable(Of Integer)
	
	Private _IDgroup As System.Nullable(Of Integer)
	
	Private _type_g As System.Nullable(Of Integer)
	
	Private _ADMIN_GROUP As System.Nullable(Of Integer)
	
	Private _TARGET As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDAChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDAChanged()
    End Sub
    Partial Private Sub OnBTN_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnBTN_NAMEChanged()
    End Sub
    Partial Private Sub OnBTN_URLChanging(value As String)
    End Sub
    Partial Private Sub OnBTN_URLChanged()
    End Sub
    Partial Private Sub OnSEQChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSEQChanged()
    End Sub
    Partial Private Sub OnBTN_GROUPChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBTN_GROUPChanged()
    End Sub
    Partial Private Sub OnIDgroupChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIDgroupChanged()
    End Sub
    Partial Private Sub Ontype_gChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ontype_gChanged()
    End Sub
    Partial Private Sub OnADMIN_GROUPChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnADMIN_GROUPChanged()
    End Sub
    Partial Private Sub OnTARGETChanging(value As String)
    End Sub
    Partial Private Sub OnTARGETChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDA", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDA() As Integer
		Get
			Return Me._IDA
		End Get
		Set
			If ((Me._IDA = value)  _
						= false) Then
				Me.OnIDAChanging(value)
				Me.SendPropertyChanging
				Me._IDA = value
				Me.SendPropertyChanged("IDA")
				Me.OnIDAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BTN_NAME", DbType:="NVarChar(MAX)")>  _
	Public Property BTN_NAME() As String
		Get
			Return Me._BTN_NAME
		End Get
		Set
			If (String.Equals(Me._BTN_NAME, value) = false) Then
				Me.OnBTN_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._BTN_NAME = value
				Me.SendPropertyChanged("BTN_NAME")
				Me.OnBTN_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BTN_URL", DbType:="NVarChar(MAX)")>  _
	Public Property BTN_URL() As String
		Get
			Return Me._BTN_URL
		End Get
		Set
			If (String.Equals(Me._BTN_URL, value) = false) Then
				Me.OnBTN_URLChanging(value)
				Me.SendPropertyChanging
				Me._BTN_URL = value
				Me.SendPropertyChanged("BTN_URL")
				Me.OnBTN_URLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SEQ", DbType:="Int")>  _
	Public Property SEQ() As System.Nullable(Of Integer)
		Get
			Return Me._SEQ
		End Get
		Set
			If (Me._SEQ.Equals(value) = false) Then
				Me.OnSEQChanging(value)
				Me.SendPropertyChanging
				Me._SEQ = value
				Me.SendPropertyChanged("SEQ")
				Me.OnSEQChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BTN_GROUP", DbType:="Int")>  _
	Public Property BTN_GROUP() As System.Nullable(Of Integer)
		Get
			Return Me._BTN_GROUP
		End Get
		Set
			If (Me._BTN_GROUP.Equals(value) = false) Then
				Me.OnBTN_GROUPChanging(value)
				Me.SendPropertyChanging
				Me._BTN_GROUP = value
				Me.SendPropertyChanged("BTN_GROUP")
				Me.OnBTN_GROUPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDgroup", DbType:="Int")>  _
	Public Property IDgroup() As System.Nullable(Of Integer)
		Get
			Return Me._IDgroup
		End Get
		Set
			If (Me._IDgroup.Equals(value) = false) Then
				Me.OnIDgroupChanging(value)
				Me.SendPropertyChanging
				Me._IDgroup = value
				Me.SendPropertyChanged("IDgroup")
				Me.OnIDgroupChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_type_g", DbType:="Int")>  _
	Public Property type_g() As System.Nullable(Of Integer)
		Get
			Return Me._type_g
		End Get
		Set
			If (Me._type_g.Equals(value) = false) Then
				Me.Ontype_gChanging(value)
				Me.SendPropertyChanging
				Me._type_g = value
				Me.SendPropertyChanged("type_g")
				Me.Ontype_gChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADMIN_GROUP", DbType:="Int")>  _
	Public Property ADMIN_GROUP() As System.Nullable(Of Integer)
		Get
			Return Me._ADMIN_GROUP
		End Get
		Set
			If (Me._ADMIN_GROUP.Equals(value) = false) Then
				Me.OnADMIN_GROUPChanging(value)
				Me.SendPropertyChanging
				Me._ADMIN_GROUP = value
				Me.SendPropertyChanged("ADMIN_GROUP")
				Me.OnADMIN_GROUPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TARGET", DbType:="NVarChar(50)")>  _
	Public Property TARGET() As String
		Get
			Return Me._TARGET
		End Get
		Set
			If (String.Equals(Me._TARGET, value) = false) Then
				Me.OnTARGETChanging(value)
				Me.SendPropertyChanging
				Me._TARGET = value
				Me.SendPropertyChanged("TARGET")
				Me.OnTARGETChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
